# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.24)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS TritonCommon::triton-common-async-work-queue TritonCommon::triton-common-error TritonCommon::triton-common-logging TritonCommon::triton-common-sync-queue TritonCommon::triton-common-table-printer TritonCommon::triton-common-thread-pool TritonCommon::common-compile-settings TritonCommon::triton-common-json)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target TritonCommon::triton-common-async-work-queue
add_library(TritonCommon::triton-common-async-work-queue SHARED IMPORTED)

set_target_properties(TritonCommon::triton-common-async-work-queue PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/src/../include"
  INTERFACE_LINK_LIBRARIES "Threads::Threads"
)

# Create imported target TritonCommon::triton-common-error
add_library(TritonCommon::triton-common-error SHARED IMPORTED)

set_target_properties(TritonCommon::triton-common-error PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/src/../include"
)

# Create imported target TritonCommon::triton-common-logging
add_library(TritonCommon::triton-common-logging SHARED IMPORTED)

set_target_properties(TritonCommon::triton-common-logging PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/src/../include"
)

# Create imported target TritonCommon::triton-common-sync-queue
add_library(TritonCommon::triton-common-sync-queue INTERFACE IMPORTED)

set_target_properties(TritonCommon::triton-common-sync-queue PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/include"
)

# Create imported target TritonCommon::triton-common-table-printer
add_library(TritonCommon::triton-common-table-printer SHARED IMPORTED)

set_target_properties(TritonCommon::triton-common-table-printer PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/src/../include"
)

# Create imported target TritonCommon::triton-common-thread-pool
add_library(TritonCommon::triton-common-thread-pool SHARED IMPORTED)

set_target_properties(TritonCommon::triton-common-thread-pool PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/src/../include"
  INTERFACE_LINK_LIBRARIES "Threads::Threads"
)

# Create imported target TritonCommon::common-compile-settings
add_library(TritonCommon::common-compile-settings INTERFACE IMPORTED)

set_target_properties(TritonCommon::common-compile-settings PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_11"
  INTERFACE_COMPILE_OPTIONS "\$<\$<OR:\$<CXX_COMPILER_ID:Clang>,\$<CXX_COMPILER_ID:AppleClang>,\$<CXX_COMPILER_ID:GNU>>:;-Wall;-Wextra;-Wno-unused-parameter;-Wno-type-limits;-Werror>;\$<\$<CXX_COMPILER_ID:MSVC>:/W0;/D_WIN32_WINNT=0x0A00;/EHsc>"
)

# Create imported target TritonCommon::triton-common-json
add_library(TritonCommon::triton-common-json INTERFACE IMPORTED)

set_target_properties(TritonCommon::triton-common-json PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-src/include;/usr/include"
)

# Import target "TritonCommon::triton-common-async-work-queue" for configuration "Release"
set_property(TARGET TritonCommon::triton-common-async-work-queue APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(TritonCommon::triton-common-async-work-queue PROPERTIES
  IMPORTED_LOCATION_RELEASE "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-build/src/libtritonasyncworkqueue.so"
  IMPORTED_SONAME_RELEASE "libtritonasyncworkqueue.so"
  )

# Import target "TritonCommon::triton-common-error" for configuration "Release"
set_property(TARGET TritonCommon::triton-common-error APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(TritonCommon::triton-common-error PROPERTIES
  IMPORTED_LOCATION_RELEASE "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-build/src/libtritoncommonerror.so"
  IMPORTED_SONAME_RELEASE "libtritoncommonerror.so"
  )

# Import target "TritonCommon::triton-common-logging" for configuration "Release"
set_property(TARGET TritonCommon::triton-common-logging APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(TritonCommon::triton-common-logging PROPERTIES
  IMPORTED_LOCATION_RELEASE "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-build/src/libtritoncommonlogging.so"
  IMPORTED_SONAME_RELEASE "libtritoncommonlogging.so"
  )

# Import target "TritonCommon::triton-common-table-printer" for configuration "Release"
set_property(TARGET TritonCommon::triton-common-table-printer APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(TritonCommon::triton-common-table-printer PROPERTIES
  IMPORTED_LOCATION_RELEASE "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-build/src/libtritontableprinter.so"
  IMPORTED_SONAME_RELEASE "libtritontableprinter.so"
  )

# Import target "TritonCommon::triton-common-thread-pool" for configuration "Release"
set_property(TARGET TritonCommon::triton-common-thread-pool APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE)
set_target_properties(TritonCommon::triton-common-thread-pool PROPERTIES
  IMPORTED_LOCATION_RELEASE "/home/d7y/dragonfly-repository-agent-by-xz/build/_deps/repo-common-build/src/libtritonthreadpool.so"
  IMPORTED_SONAME_RELEASE "libtritonthreadpool.so"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
